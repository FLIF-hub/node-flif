/* eslint-disable no-multi-spaces */

function test () {
    var runAllTests = require('../testers/loopOverAllTestSets.js');
    var testName = 'verifyParams';
    function rand (num) {
        return Math.round(Math.random() * num);
    }
    var testData = [
        // Test known good for effort
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', effort: 0                       }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', effort: 0                       }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', effort: 1                       }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', effort: 1                       }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', effort: 50                      }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', effort: 50                      }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', effort: 100                     }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', effort: 100                     }, 'transcode', true]},

        // Test random number from 0-100 on effort
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', effort: rand(100)               }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', effort: rand(100)               }, 'transcode', true]},

        // Test known bad for effort
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: 0                       }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: 1                       }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: 50                      }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: 100                     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: rand(100)               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', effort: 101                     }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: 101                     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', effort: 101                     }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', effort: -10                     }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: -10                     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', effort: -10                     }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', effort: 22.2                    }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: 22.2                    }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', effort: 22.2                    }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', effort: 'a'                     }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: 'a'                     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', effort: 'a'                     }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', effort: [0, 1, 2]               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: [0, 1, 2]               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', effort: [0, 1, 2]               }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', effort: {'a': 1}                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: {'a': 1}                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', effort: {'a': 1}                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', effort: null                    }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: null                    }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', effort: null                    }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', effort: true                    }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: true                    }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', effort: true                    }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', effort: false                   }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  effort: false                   }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', effort: false                   }, 'transcode', true]},

        // Test known good for interlace
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', interlace: true                 }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', interlace: true                 }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', interlace: false                }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', interlace: false                }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', interlace: 'auto'               }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', interlace: 'auto'               }, 'transcode', true]},

        // Test known bad for interlace
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  interlace: true                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  interlace: false                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  interlace: 'auto'               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', interlace: 'a'                  }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  interlace: 'a'                  }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', interlace: 'a'                  }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', interlace: [0, 1, 2]            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  interlace: [0, 1, 2]            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', interlace: [0, 1, 2]            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', interlace: {'a': 1}             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  interlace: {'a': 1}             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', interlace: {'a': 1}             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', interlace: null                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  interlace: null                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', interlace: null                 }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', interlace: 8                    }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  interlace: 8                    }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', interlace: 8                    }, 'transcode', true]},

        // Test known good for keepAlpha
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', keepAlpha: true                 }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', keepAlpha: true                 }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', keepAlpha: false                }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', keepAlpha: false                }, 'transcode', true]},

        // Test known bad for keepAlpha
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  keepAlpha: true                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  keepAlpha: false                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', keepAlpha: 'a'                  }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  keepAlpha: 'a'                  }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', keepAlpha: 'a'                  }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', keepAlpha: [0, 1, 2]            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  keepAlpha: [0, 1, 2]            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', keepAlpha: [0, 1, 2]            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', keepAlpha: {'a': 1}             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  keepAlpha: {'a': 1}             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', keepAlpha: {'a': 1}             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', keepAlpha: null                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  keepAlpha: null                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', keepAlpha: null                 }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', keepAlpha: 8                    }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  keepAlpha: 8                    }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', keepAlpha: 8                    }, 'transcode', true]},

        // Test known good for frameDelay
        // TODO: Find out upper bounds for frameDelay and max number of frames allowed
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [0]                 }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: [0]                 }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [1]                 }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: [1]                 }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [50]                }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: [50]                }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [100]               }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: [100]               }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [1000]              }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: [1000]              }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [10000]             }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: [10000]             }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [100, 200]          }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: [100, 200]          }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [100, 200, 300]     }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: [100, 200, 300]     }, 'transcode', true]},

        // Test random number from 0-100 on frameDelay
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [rand(100)]         }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: [rand(100)]         }, 'transcode', true]},

        // Test known bad for frameDelay
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [0]                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [1]                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [50]                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [100]               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [1000]              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [10000]             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [100, 200]          }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [100, 200, 300]     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameDelay: [rand(100)]         }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [-100]              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [-100]              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: [-100]              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: 101                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameDelay: 101                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: 101                 }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: -10                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameDelay: -10                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: -10                 }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: 22.2                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameDelay: 22.2                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: 22.2                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: 'a'                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameDelay: 'a'                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: 'a'                 }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: {'a': 1}            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameDelay: {'a': 1}            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: {'a': 1}            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: null                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameDelay: null                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: null                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: true                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameDelay: true                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: true                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameDelay: false               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameDelay: false               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameDelay: false               }, 'transcode', true]},

        // Test known good for maxPaletteSize
        // TODO: Find out upper bounds for maxPaletteSize, all I know is it allows for the number 512 and logically shouldn't be less than 2
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 512             }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 512             }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 256             }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 256             }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 128             }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 128             }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 64              }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 64              }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 32              }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 32              }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 16              }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 16              }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 8               }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 8               }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 4               }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 4               }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 2               }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 2               }, 'transcode', true]},

        // Test random number from 2-1024 on maxPaletteSize
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: rand(1022) + 2  }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: rand(1022) + 2  }, 'transcode', true]},

        // Test known bad for maxPaletteSize
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: rand(1022) + 2  }, 'decode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 512             }, 'decode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 256             }, 'decode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 128             }, 'decode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 64              }, 'decode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 32              }, 'decode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 16              }, 'decode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 8               }, 'decode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 4               }, 'decode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 2               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 1               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 1               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 1               }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 0               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 0               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 0               }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: -10             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: -10             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: -10             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 22.2            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 22.2            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 22.2            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: 'a'             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: 'a'             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: 'a'             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: [0, 1, 2]       }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: [0, 1, 2]       }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: [0, 1, 2]       }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: {'a': 1}        }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: {'a': 1}        }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: {'a': 1}        }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: null            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: null            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: null            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: true            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: true            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: true            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxPaletteSize: false           }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxPaletteSize: false           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxPaletteSize: false           }, 'transcode', true]},

        // Test known good for colorBuckets
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', colorBuckets: true              }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', colorBuckets: true              }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', colorBuckets: false             }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', colorBuckets: false             }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', colorBuckets: 'auto'            }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', colorBuckets: 'auto'            }, 'transcode', true]},

        // Test known bad for colorBuckets
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  colorBuckets: true              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  colorBuckets: false             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  colorBuckets: 'auto'            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', colorBuckets: 'a'               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  colorBuckets: 'a'               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', colorBuckets: 'a'               }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', colorBuckets: [0, 1, 2]         }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  colorBuckets: [0, 1, 2]         }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', colorBuckets: [0, 1, 2]         }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', colorBuckets: {'a': 1}          }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  colorBuckets: {'a': 1}          }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', colorBuckets: {'a': 1}          }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', colorBuckets: null              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  colorBuckets: null              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', colorBuckets: null              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', colorBuckets: 8                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  colorBuckets: 8                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', colorBuckets: 8                 }, 'transcode', true]},

        // Test known good for channelCompact
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', channelCompact: true            }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', channelCompact: true            }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', channelCompact: false           }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', channelCompact: false           }, 'transcode', true]},

        // Test known bad for channelCompact
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  channelCompact: true            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  channelCompact: false           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', channelCompact: 'a'             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  channelCompact: 'a'             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', channelCompact: 'a'             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', channelCompact: [0, 1, 2]       }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  channelCompact: [0, 1, 2]       }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', channelCompact: [0, 1, 2]       }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', channelCompact: {'a': 1}        }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  channelCompact: {'a': 1}        }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', channelCompact: {'a': 1}        }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', channelCompact: null            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  channelCompact: null            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', channelCompact: null            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', channelCompact: 8               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  channelCompact: 8               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', channelCompact: 8               }, 'transcode', true]},

        // Test known good for ycocg
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', ycocg: true                     }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', ycocg: true                     }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', ycocg: false                    }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', ycocg: false                    }, 'transcode', true]},

        // Test known bad for ycocg
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  ycocg: true                     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  ycocg: false                    }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', ycocg: 'a'                      }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  ycocg: 'a'                      }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', ycocg: 'a'                      }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', ycocg: [0, 1, 2]                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  ycocg: [0, 1, 2]                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', ycocg: [0, 1, 2]                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', ycocg: {'a': 1}                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  ycocg: {'a': 1}                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', ycocg: {'a': 1}                 }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', ycocg: null                     }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  ycocg: null                     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', ycocg: null                     }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', ycocg: 8                        }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  ycocg: 8                        }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', ycocg: 8                        }, 'transcode', true]},

        // Test known good for subtractGreen
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', subtractGreen: true             }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', subtractGreen: true             }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', subtractGreen: false            }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', subtractGreen: false            }, 'transcode', true]},

        // Test known bad for subtractGreen
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  subtractGreen: true             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  subtractGreen: false            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', subtractGreen: 'a'              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  subtractGreen: 'a'              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', subtractGreen: 'a'              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', subtractGreen: [0, 1, 2]        }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  subtractGreen: [0, 1, 2]        }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', subtractGreen: [0, 1, 2]        }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', subtractGreen: {'a': 1}         }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  subtractGreen: {'a': 1}         }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', subtractGreen: {'a': 1}         }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', subtractGreen: null             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  subtractGreen: null             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', subtractGreen: null             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', subtractGreen: 8                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  subtractGreen: 8                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', subtractGreen: 8                }, 'transcode', true]},

        // Test known good for frameShape
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameShape: true                }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameShape: true                }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', frameShape: false               }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', frameShape: false               }, 'transcode', true]},

        // Test known bad for frameShape
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameShape: true                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameShape: false               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameShape: 'a'                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameShape: 'a'                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameShape: 'a'                 }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameShape: [0, 1, 2]           }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameShape: [0, 1, 2]           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameShape: [0, 1, 2]           }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameShape: {'a': 1}            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameShape: {'a': 1}            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameShape: {'a': 1}            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameShape: null                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameShape: null                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameShape: null                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', frameShape: 8                   }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  frameShape: 8                   }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', frameShape: 8                   }, 'transcode', true]},

        // Test known good for maxFrameLookBack
        // TODO: Find out upper bounds for maxFrameLookBack, all I know is it allows for the number 1
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: 1             }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: 1             }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: 2             }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: 2             }, 'transcode', true]},

        // Test random number from 1-1024 on maxFrameLookBack
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: rand(1023) + 1}, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: rand(1023) + 1}, 'transcode', true]},

        // Test known bad for maxFrameLookBack
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: 1             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: rand(1023) + 1}, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: 0             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: 0             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: 0             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: -10           }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: -10           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: -10           }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: 22.2          }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: 22.2          }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: 22.2          }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: 'a'           }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: 'a'           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: 'a'           }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: [0, 1, 2]     }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: [0, 1, 2]     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: [0, 1, 2]     }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: {'a': 1}      }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: {'a': 1}      }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: {'a': 1}      }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: null          }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: null          }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: null          }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: true          }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: true          }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: true          }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maxFrameLookBack: false         }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maxFrameLookBack: false         }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maxFrameLookBack: false         }, 'transcode', true]},

        // Test known good for maniacRepeats
        // TODO: Find out upper bounds for maniacRepeats, all I know is it allows for the number 2
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: 1                }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: 1                }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: 2                }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: 2                }, 'transcode', true]},

        // Test random number from 1-1024 on maniacRepeats
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: rand(1023) + 1   }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: rand(1023) + 1   }, 'transcode', true]},

        // Test known bad for maniacRepeats
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: 1                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: 2                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: rand(1023) + 1   }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: 0                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: 0                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: 0                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: -10              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: -10              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: -10              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: 22.2             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: 22.2             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: 22.2             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: 'a'              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: 'a'              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: 'a'              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: [0, 1, 2]        }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: [0, 1, 2]        }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: [0, 1, 2]        }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: {'a': 1}         }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: {'a': 1}         }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: {'a': 1}         }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: null             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: null             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: null             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: true             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: true             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: true             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacRepeats: false            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacRepeats: false            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacRepeats: false            }, 'transcode', true]},

        // Test known good for maniacThreshold
        // TODO: Find out upper/lower bounds for maniacThreshold, all I know is it allows for the number 64
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: 64             }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: 64             }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: 128            }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: 128            }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: 0              }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: 0              }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: 1              }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: 1              }, 'transcode', true]},

        // Test random number from 0-255 on maniacThreshold
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: rand(255)      }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: rand(255)      }, 'transcode', true]},

        // Test known bad for maniacThreshold
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: 0              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: 1              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: 64             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: rand(255)      }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: -10            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: -10            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: -10            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: 22.2           }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: 22.2           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: 22.2           }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: 'a'            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: 'a'            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: 'a'            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: [0, 1, 2]      }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: [0, 1, 2]      }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: [0, 1, 2]      }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: {'a': 1}       }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: {'a': 1}       }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: {'a': 1}       }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: null           }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: null           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: null           }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: true           }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: true           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: true           }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacThreshold: false          }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacThreshold: false          }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacThreshold: false          }, 'transcode', true]},

        // Test known good for maniacDivisor
        // TODO: Find out upper/lower bounds for maniacDivisor, all I know is it allows for the number 30
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: 30               }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: 30               }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: 1                }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: 1                }, 'transcode', true]},

        // Test random number from 1-100 on maniacDivisor
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: rand(99) + 1     }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: rand(99) + 1     }, 'transcode', true]},

        // Test known bad for maniacDivisor
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: 30               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: 1                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: rand(99) + 1     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: 0                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: 0                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: 0                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: -10              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: -10              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: -10              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: 22.2             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: 22.2             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: 22.2             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: 'a'              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: 'a'              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: 'a'              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: [0, 1, 2]        }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: [0, 1, 2]        }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: [0, 1, 2]        }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: {'a': 1}         }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: {'a': 1}         }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: {'a': 1}         }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: null             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: null             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: null             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: true             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: true             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: true             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacDivisor: false            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacDivisor: false            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacDivisor: false            }, 'transcode', true]},

        // Test known good for maniacMinSize
        // TODO: Find out upper/lower bounds for maniacMinSize, all I know is it allows for the number 50
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: 50               }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: 50               }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: 1                }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: 1                }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: 2                }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: 2                }, 'transcode', true]},

        // Test random number from 1-100 on maniacMinSize
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: rand(99) + 1     }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: rand(99) + 1     }, 'transcode', true]},

        // Test known bad for maniacMinSize
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: 50               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: 1                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: 2                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: rand(99) + 1     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: 0                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: 0                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: 0                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: -10              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: -10              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: -10              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: 22.2             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: 22.2             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: 22.2             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: 'a'              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: 'a'              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: 'a'              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: [0, 1, 2]        }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: [0, 1, 2]        }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: [0, 1, 2]        }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: {'a': 1}         }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: {'a': 1}         }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: {'a': 1}         }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: null             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: null             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: null             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: true             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: true             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: true             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', maniacMinSize: false            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  maniacMinSize: false            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', maniacMinSize: false            }, 'transcode', true]},

        // Test known good for chanceCutoff
        // TODO: Find out upper/lower bounds for chanceCutoff, all I know is it allows for the number 2
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: 1                 }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: 1                 }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: 2                 }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: 2                 }, 'transcode', true]},

        // Test random number from 1-100 on chanceCutoff
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: rand(99) + 1      }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: rand(99) + 1      }, 'transcode', true]},

        // Test known bad for chanceCutoff
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: 2                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: rand(99) + 1      }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: 0                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: 0                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: 0                 }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: -10               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: -10               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: -10               }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: 22.2              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: 22.2              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: 22.2              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: 'a'               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: 'a'               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: 'a'               }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: [0, 1, 2]         }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: [0, 1, 2]         }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: [0, 1, 2]         }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: {'a': 1}          }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: {'a': 1}          }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: {'a': 1}          }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: null              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: null              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: null              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: true              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: true              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: true              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceCutoff: false             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceCutoff: false             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceCutoff: false             }, 'transcode', true]},

        // Test known good for chanceAlpha
        // TODO: Find out upper/lower bounds for chanceAlpha, all I know is it allows for the number 19
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: 1                  }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: 1                  }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: 2                  }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: 2                  }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: 19                 }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: 19                 }, 'transcode', true]},

        // Test random number from 0-100 on chanceAlpha
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: rand(99)           }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: rand(99)           }, 'transcode', true]},

        // Test known bad for chanceAlpha
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: 19                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: rand(99)           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: 0                  }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: 0                  }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: 0                  }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: -10                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: -10                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: -10                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: 22.2               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: 22.2               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: 22.2               }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: 'a'                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: 'a'                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: 'a'                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: [0, 1, 2]          }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: [0, 1, 2]          }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: [0, 1, 2]          }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: {'a': 1}           }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: {'a': 1}           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: {'a': 1}           }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: null               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: null               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: null               }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: true               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: true               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: true               }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', chanceAlpha: false              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  chanceAlpha: false              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', chanceAlpha: false              }, 'transcode', true]},

        // Test known good for adaptive
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', adaptive: true                  }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', adaptive: true                  }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', adaptive: false                 }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', adaptive: false                 }, 'transcode', true]},

        // Test known bad for adaptive
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  adaptive: true                  }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  adaptive: false                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', adaptive: 'a'                   }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  adaptive: 'a'                   }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', adaptive: 'a'                   }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', adaptive: [0, 1, 2]             }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  adaptive: [0, 1, 2]             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', adaptive: [0, 1, 2]             }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', adaptive: {'a': 1}              }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  adaptive: {'a': 1}              }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', adaptive: {'a': 1}              }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', adaptive: null                  }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  adaptive: null                  }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', adaptive: null                  }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', adaptive: 8                     }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  adaptive: 8                     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', adaptive: 8                     }, 'transcode', true]},

        // Test known good for guess
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', guess: 'heuristically'          }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', guess: 'heuristically'          }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', guess: 'average'                }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', guess: 'average'                }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', guess: 'median gradient'        }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', guess: 'median gradient'        }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', guess: 'median number'          }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', guess: 'median number'          }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', guess: 'mixed'                  }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', guess: 'mixed'                  }, 'transcode', true]},

        // Test known bad for guess
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: 'heuristically'          }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: 'average'                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: 'median gradient'        }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: 'median number'          }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: 'mixed'                  }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', guess: true                     }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: true                     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', guess: true                     }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', guess: false                    }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: false                    }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', guess: false                    }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', guess: 'a'                      }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: 'a'                      }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', guess: 'a'                      }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', guess: [0, 1, 2]                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: [0, 1, 2]                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', guess: [0, 1, 2]                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', guess: {'a': 1}                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: {'a': 1}                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', guess: {'a': 1}                 }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', guess: null                     }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: null                     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', guess: null                     }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', guess: 8                        }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  guess: 8                        }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', guess: 8                        }, 'transcode', true]},

        // Test known good for alphaGuess
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: 'heuristically'     }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: 'heuristically'     }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: 'average'           }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: 'average'           }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: 'median gradient'   }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: 'median gradient'   }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: 'median number'     }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: 'median number'     }, 'transcode', true]},
        { expected: true,  arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: 'mixed'             }, 'encode',    true]},
        { expected: true,  arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: 'mixed'             }, 'transcode', true]},

        // Test known bad for alphaGuess
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: 'heuristically'     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: 'average'           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: 'median gradient'   }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: 'median number'     }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: 'mixed'             }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: true                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: true                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: true                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: false               }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: false               }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: false               }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: 'a'                 }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: 'a'                 }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: 'a'                 }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: [0, 1, 2]           }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: [0, 1, 2]           }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: [0, 1, 2]           }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: {'a': 1}            }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: {'a': 1}            }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: {'a': 1}            }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: null                }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: null                }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: null                }, 'transcode', true]},
        { expected: false, arguments: [{ input: 'a.png',  output: 'a.flif', alphaGuess: 8                   }, 'encode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.png',  alphaGuess: 8                   }, 'decode',    true]},
        { expected: false, arguments: [{ input: 'a.flif', output: 'a.flif', alphaGuess: 8                   }, 'transcode', true]}
    ];

    runAllTests(testName, 'helpers', testData);

    return [testName, testData.length];
}

module.exports = test;
